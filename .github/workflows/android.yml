name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Debug Directory Structure
      run: |
        echo "Current directory: $(pwd)"
        ls -la
        echo "Searching for gradlew file:"
        find . -name "gradlew" -type f
        echo "Searching for build.gradle files:"
        find . -name "build.gradle" -type f
        
    - name: Create temporary gradle.properties
      run: |
        # Create a minimal gradle.properties without the Windows-specific Java home
        echo "org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8" > /tmp/gradle.properties
        echo "android.useAndroidX=true" >> /tmp/gradle.properties
        
    - name: Setup Gradle
      run: |
        # Find build.gradle in the root or subdirectories
        ROOT_BUILD_GRADLE=$(find . -maxdepth 2 -name "build.gradle" -type f | head -n 1)
        
        if [ -z "$ROOT_BUILD_GRADLE" ]; then
          echo "No build.gradle found in expected locations"
          exit 1
        fi
        
        # Get the directory containing build.gradle
        PROJECT_DIR=$(dirname "$ROOT_BUILD_GRADLE")
        echo "Project directory: $PROJECT_DIR"
        
        # Find gradlew file
        GRADLEW_PATH=$(find . -name "gradlew" -type f | head -n 1)
        
        if [ -z "$GRADLEW_PATH" ]; then
          echo "No gradlew file found, generating wrapper"
          # Install Gradle
          wget -q https://services.gradle.org/distributions/gradle-8.0-bin.zip
          unzip -q gradle-8.0-bin.zip
          export PATH=$PATH:$(pwd)/gradle-8.0/bin
          
          # Generate wrapper in the project directory
          cd "$PROJECT_DIR"
          # Backup any existing gradle.properties
          if [ -f "gradle.properties" ]; then
            mv gradle.properties gradle.properties.bak
          fi
          # Use our temporary gradle.properties
          cp /tmp/gradle.properties ./gradle.properties
          
          # Generate wrapper with explicitly set JAVA_HOME
          JAVA_OPTS="-Dorg.gradle.java.home=$JAVA_HOME" gradle wrapper
          
          # Restore original gradle.properties if it existed
          if [ -f "gradle.properties.bak" ]; then
            mv gradle.properties.bak gradle.properties
          fi
          
          cd - > /dev/null
          
          # Find the newly created gradlew
          GRADLEW_PATH=$(find . -name "gradlew" -type f | head -n 1)
          
          if [ -z "$GRADLEW_PATH" ]; then
            echo "Failed to generate Gradle wrapper"
            exit 1
          fi
        fi
        
        # Make gradlew executable
        chmod +x "$GRADLEW_PATH"
        
        # Save the paths for later steps
        echo "GRADLEW_PATH=$GRADLEW_PATH" >> $GITHUB_ENV
        echo "PROJECT_DIR=$PROJECT_DIR" >> $GITHUB_ENV
        
        echo "Using gradlew at: $GRADLEW_PATH"
        echo "Project directory: $PROJECT_DIR"
      
    - name: Build with Gradle
      run: |
        cd "${{ env.PROJECT_DIR }}"
        "${{ env.GRADLEW_PATH }}" build -Dorg.gradle.java.home=$JAVA_HOME || echo "Build step may have failed but continuing"
      
    - name: Build Debug APK
      run: |
        cd "${{ env.PROJECT_DIR }}"
        "${{ env.GRADLEW_PATH }}" assembleDebug -Dorg.gradle.java.home=$JAVA_HOME || echo "APK build step may have failed but continuing"
      
    - name: Debug APK Output Directory
      run: |
        echo "Checking APK output directory structure:"
        find . -name "outputs" -type d | xargs ls -la || echo "No outputs directories found"
        find . -name "*.apk" -type f || echo "No APK files found" 