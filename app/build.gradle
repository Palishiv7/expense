plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
}

// Load keystore properties from a local file or environment variables for GitHub Actions
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()

// Check if we're running in GitHub Actions
def isGitHubActions = System.getenv("GITHUB_ACTIONS") == "true"

if (isGitHubActions) {
    // In GitHub Actions, load from environment variables
    keystoreProperties.put("storePassword", System.getenv("KEYSTORE_PASSWORD") ?: "")
    keystoreProperties.put("keyPassword", System.getenv("KEY_PASSWORD") ?: "")
    keystoreProperties.put("keyAlias", System.getenv("KEY_ALIAS") ?: "")
    // For GitHub Actions, the keystore is in the app directory
    keystoreProperties.put("storeFile", "moneypulse.keystore")
} else if (keystorePropertiesFile.exists()) {
    // For local development, try to load from keystore.properties file
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.moneypulse.app"
    compileSdk 34
    buildToolsVersion "34.0.0"

    defaultConfig {
        applicationId "com.moneypulse.app"
        minSdk 26
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        
        // Ensure proper compatibility with javax.crypto
        multiDexEnabled true
    }

    // Add signing configurations
    signingConfigs {
        release {
            // Use empty values as fallback if properties aren't available
            // This allows the build to complete without signing for development purposes
            keyAlias keystoreProperties.getProperty('keyAlias', '')
            keyPassword keystoreProperties.getProperty('keyPassword', '')
            storePassword keystoreProperties.getProperty('storePassword', '')
            
            // Handle the storeFile correctly
            if (keystoreProperties.getProperty('storeFile') != null && !keystoreProperties.getProperty('storeFile').isEmpty()) {
                storeFile file(keystoreProperties.getProperty('storeFile'))
            }
            
            // Skip signing if not all properties are available
            // This helps in development builds
            enableV1Signing true
            enableV2Signing true
            enableV3Signing true
        }
    }

    // Configure App Bundle for Play Store
    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Apply release signing configuration
            signingConfig signingConfigs.release
            
            // Disable debug logs in release builds
            buildConfigField "boolean", "DEBUG_LOGGING", "false"
            
            // Additional security for release builds
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            pseudoLocalesEnabled false
            zipAlignEnabled true
        }
        
        debug {
            minifyEnabled false
            debuggable true
            
            // Enable logging in debug builds
            buildConfigField "boolean", "DEBUG_LOGGING", "true"
            
            // For security testing in debug builds
            applicationIdSuffix ".debug"
        }
    }
    
    // Enable Java 8 features for security APIs
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // Core Android dependencies
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.2'
    implementation 'androidx.activity:activity-compose:1.8.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    
    // ViewPager2 for onboarding
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    
    // ConstraintLayout
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    
    // Splash screen
    implementation 'androidx.core:core-splashscreen:1.0.1'
    
    // Compose dependencies
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.navigation:navigation-compose:2.7.4"
    implementation "androidx.compose.animation:animation:$compose_version"
    implementation "androidx.compose.animation:animation-graphics:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    
    // Room for local database
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    
    // SQLCipher for encrypted database
    implementation "net.zetetic:android-database-sqlcipher:4.5.3"
    implementation "androidx.sqlite:sqlite-ktx:2.3.1"
    
    // Encrypted SharedPreferences
    implementation "androidx.security:security-crypto:1.1.0-alpha06"
    
    // Biometric authentication
    implementation "androidx.biometric:biometric:1.2.0-alpha05"
    
    // Hilt for dependency injection
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    
    // Hilt WorkManager integration
    implementation "androidx.hilt:hilt-work:1.0.0"
    kapt "androidx.hilt:hilt-compiler:1.0.0"
    
    // WorkManager for background tasks
    implementation "androidx.work:work-runtime-ktx:2.8.1"
    
    // Coroutines & Flow
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    
    // Security tools
    implementation "org.bouncycastle:bcprov-jdk15on:1.70" // Cryptography provider
    // Bouncycastle for additional cryptography support
    implementation "org.bouncycastle:bcpkix-jdk15on:1.70" // PKI/CMS/CRS/PKCS/etc. functionality
    // Apache Commons Codec for base64 and other encodings
    implementation "commons-codec:commons-codec:1.15"
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
}

// Allow references to generated code
kapt {
    correctErrorTypes = true
    arguments {
        arg("dagger.fastInit", "enabled")
        arg("dagger.experimentalDaggerErrorMessages", "enabled")
    }
    javacOptions {
        option("-Xmaxerrs", 500)
    }
} 